// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2017 17:26:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          os_control_unit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module os_control_unit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] BIOS_INSTRUCTION_OPCODE;
reg CLOCK;
// wires                                               
wire instruction_selection;

// assign statements (if any)                          
os_control_unit i1 (
// port map - connection between master ports and signals/registers   
	.BIOS_INSTRUCTION_OPCODE(BIOS_INSTRUCTION_OPCODE),
	.CLOCK(CLOCK),
	.instruction_selection(instruction_selection)
);
initial 
begin 
#1000000 $finish;
end 
// BIOS_INSTRUCTION_OPCODE[ 5 ]
initial
begin
	BIOS_INSTRUCTION_OPCODE[5] = 1'b0;
	BIOS_INSTRUCTION_OPCODE[5] = #110000 1'b1;
	BIOS_INSTRUCTION_OPCODE[5] = #20000 1'b0;
	BIOS_INSTRUCTION_OPCODE[5] = #330000 1'b1;
	BIOS_INSTRUCTION_OPCODE[5] = #50000 1'b0;
	BIOS_INSTRUCTION_OPCODE[5] = #320000 1'b1;
	BIOS_INSTRUCTION_OPCODE[5] = #40000 1'b0;
end 
// BIOS_INSTRUCTION_OPCODE[ 4 ]
initial
begin
	BIOS_INSTRUCTION_OPCODE[4] = 1'b0;
	BIOS_INSTRUCTION_OPCODE[4] = #110000 1'b1;
	BIOS_INSTRUCTION_OPCODE[4] = #20000 1'b0;
	BIOS_INSTRUCTION_OPCODE[4] = #140000 1'b1;
	BIOS_INSTRUCTION_OPCODE[4] = #40000 1'b0;
	BIOS_INSTRUCTION_OPCODE[4] = #270000 1'b1;
	BIOS_INSTRUCTION_OPCODE[4] = #40000 1'b0;
end 
// BIOS_INSTRUCTION_OPCODE[ 3 ]
initial
begin
	BIOS_INSTRUCTION_OPCODE[3] = 1'b0;
	BIOS_INSTRUCTION_OPCODE[3] = #110000 1'b1;
	BIOS_INSTRUCTION_OPCODE[3] = #20000 1'b0;
	BIOS_INSTRUCTION_OPCODE[3] = #140000 1'b1;
	BIOS_INSTRUCTION_OPCODE[3] = #40000 1'b0;
	BIOS_INSTRUCTION_OPCODE[3] = #70000 1'b1;
	BIOS_INSTRUCTION_OPCODE[3] = #30000 1'b0;
	BIOS_INSTRUCTION_OPCODE[3] = #170000 1'b1;
	BIOS_INSTRUCTION_OPCODE[3] = #40000 1'b0;
end 
// BIOS_INSTRUCTION_OPCODE[ 2 ]
initial
begin
	BIOS_INSTRUCTION_OPCODE[2] = 1'b0;
	BIOS_INSTRUCTION_OPCODE[2] = #110000 1'b1;
	BIOS_INSTRUCTION_OPCODE[2] = #20000 1'b0;
	BIOS_INSTRUCTION_OPCODE[2] = #140000 1'b1;
	BIOS_INSTRUCTION_OPCODE[2] = #40000 1'b0;
	BIOS_INSTRUCTION_OPCODE[2] = #70000 1'b1;
	BIOS_INSTRUCTION_OPCODE[2] = #30000 1'b0;
	BIOS_INSTRUCTION_OPCODE[2] = #50000 1'b1;
	BIOS_INSTRUCTION_OPCODE[2] = #50000 1'b0;
	BIOS_INSTRUCTION_OPCODE[2] = #70000 1'b1;
	BIOS_INSTRUCTION_OPCODE[2] = #40000 1'b0;
	BIOS_INSTRUCTION_OPCODE[2] = #50000 1'b1;
	BIOS_INSTRUCTION_OPCODE[2] = #20000 1'b0;
	BIOS_INSTRUCTION_OPCODE[2] = #140000 1'b1;
	BIOS_INSTRUCTION_OPCODE[2] = #40000 1'b0;
end 
// BIOS_INSTRUCTION_OPCODE[ 1 ]
initial
begin
	BIOS_INSTRUCTION_OPCODE[1] = 1'b0;
	BIOS_INSTRUCTION_OPCODE[1] = #270000 1'b1;
	BIOS_INSTRUCTION_OPCODE[1] = #40000 1'b0;
	BIOS_INSTRUCTION_OPCODE[1] = #150000 1'b1;
	BIOS_INSTRUCTION_OPCODE[1] = #50000 1'b0;
	BIOS_INSTRUCTION_OPCODE[1] = #160000 1'b1;
	BIOS_INSTRUCTION_OPCODE[1] = #20000 1'b0;
	BIOS_INSTRUCTION_OPCODE[1] = #140000 1'b1;
	BIOS_INSTRUCTION_OPCODE[1] = #40000 1'b0;
end 
// BIOS_INSTRUCTION_OPCODE[ 0 ]
initial
begin
	BIOS_INSTRUCTION_OPCODE[0] = 1'b0;
	BIOS_INSTRUCTION_OPCODE[0] = #270000 1'b1;
	BIOS_INSTRUCTION_OPCODE[0] = #40000 1'b0;
	BIOS_INSTRUCTION_OPCODE[0] = #150000 1'b1;
	BIOS_INSTRUCTION_OPCODE[0] = #50000 1'b0;
	BIOS_INSTRUCTION_OPCODE[0] = #320000 1'b1;
	BIOS_INSTRUCTION_OPCODE[0] = #40000 1'b0;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #5000 1'b1;
	#5000;
end 
endmodule


// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/18/2017 21:14:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          harddrive
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module harddrive_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [31:0] data_write;
reg flag_write_hd;
reg [13:0] sector;
reg [6:0] track;
// wires                                               
wire [31:0] output_hard_drive;

// assign statements (if any)                          
harddrive i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.data_write(data_write),
	.flag_write_hd(flag_write_hd),
	.output_hard_drive(output_hard_drive),
	.sector(sector),
	.track(track)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 
// data_write[ 31 ]
initial
begin
	data_write[31] = 1'b0;
end 
// data_write[ 30 ]
initial
begin
	data_write[30] = 1'b0;
end 
// data_write[ 29 ]
initial
begin
	data_write[29] = 1'b0;
end 
// data_write[ 28 ]
initial
begin
	data_write[28] = 1'b0;
end 
// data_write[ 27 ]
initial
begin
	data_write[27] = 1'b0;
end 
// data_write[ 26 ]
initial
begin
	data_write[26] = 1'b0;
end 
// data_write[ 25 ]
initial
begin
	data_write[25] = 1'b0;
end 
// data_write[ 24 ]
initial
begin
	data_write[24] = 1'b0;
end 
// data_write[ 23 ]
initial
begin
	data_write[23] = 1'b0;
end 
// data_write[ 22 ]
initial
begin
	data_write[22] = 1'b0;
end 
// data_write[ 21 ]
initial
begin
	data_write[21] = 1'b0;
end 
// data_write[ 20 ]
initial
begin
	data_write[20] = 1'b0;
end 
// data_write[ 19 ]
initial
begin
	data_write[19] = 1'b0;
end 
// data_write[ 18 ]
initial
begin
	data_write[18] = 1'b0;
end 
// data_write[ 17 ]
initial
begin
	data_write[17] = 1'b0;
end 
// data_write[ 16 ]
initial
begin
	data_write[16] = 1'b0;
end 
// data_write[ 15 ]
initial
begin
	data_write[15] = 1'b0;
end 
// data_write[ 14 ]
initial
begin
	data_write[14] = 1'b0;
end 
// data_write[ 13 ]
initial
begin
	data_write[13] = 1'b0;
end 
// data_write[ 12 ]
initial
begin
	data_write[12] = 1'b1;
end 
// data_write[ 11 ]
initial
begin
	data_write[11] = 1'b0;
end 
// data_write[ 10 ]
initial
begin
	data_write[10] = 1'b0;
end 
// data_write[ 9 ]
initial
begin
	data_write[9] = 1'b0;
end 
// data_write[ 8 ]
initial
begin
	data_write[8] = 1'b0;
end 
// data_write[ 7 ]
initial
begin
	data_write[7] = 1'b0;
end 
// data_write[ 6 ]
initial
begin
	data_write[6] = 1'b0;
end 
// data_write[ 5 ]
initial
begin
	data_write[5] = 1'b1;
end 
// data_write[ 4 ]
initial
begin
	data_write[4] = 1'b1;
end 
// data_write[ 3 ]
initial
begin
	data_write[3] = 1'b1;
end 
// data_write[ 2 ]
initial
begin
	data_write[2] = 1'b0;
end 
// data_write[ 1 ]
initial
begin
	data_write[1] = 1'b0;
end 
// data_write[ 0 ]
initial
begin
	data_write[0] = 1'b0;
end 

// flag_write_hd
initial
begin
	flag_write_hd = 1'b0;
	flag_write_hd = #10000 1'b1;
	flag_write_hd = #280000 1'b0;
end 
// sector[ 13 ]
initial
begin
	sector[13] = 1'b0;
end 
// sector[ 12 ]
initial
begin
	sector[12] = 1'b0;
end 
// sector[ 11 ]
initial
begin
	sector[11] = 1'b0;
end 
// sector[ 10 ]
initial
begin
	sector[10] = 1'b0;
end 
// sector[ 9 ]
initial
begin
	sector[9] = 1'b0;
end 
// sector[ 8 ]
initial
begin
	sector[8] = 1'b0;
end 
// sector[ 7 ]
initial
begin
	sector[7] = 1'b0;
end 
// sector[ 6 ]
initial
begin
	sector[6] = 1'b0;
end 
// sector[ 5 ]
initial
begin
	sector[5] = 1'b0;
end 
// sector[ 4 ]
initial
begin
	sector[4] = 1'b0;
end 
// sector[ 3 ]
initial
begin
	sector[3] = 1'b1;
	sector[3] = #270000 1'b0;
end 
// sector[ 2 ]
initial
begin
	sector[2] = 1'b0;
end 
// sector[ 1 ]
initial
begin
	sector[1] = 1'b0;
	sector[1] = #750000 1'b1;
	sector[1] = #230000 1'b0;
end 
// sector[ 0 ]
initial
begin
	sector[0] = 1'b1;
	sector[0] = #270000 1'b0;
	sector[0] = #220000 1'b1;
	sector[0] = #240000 1'b0;
end 
// track[ 6 ]
initial
begin
	track[6] = 1'b0;
end 
// track[ 5 ]
initial
begin
	track[5] = 1'b0;
end 
// track[ 4 ]
initial
begin
	track[4] = 1'b0;
end 
// track[ 3 ]
initial
begin
	track[3] = 1'b1;
	track[3] = #590000 1'b0;
end 
// track[ 2 ]
initial
begin
	track[2] = 1'b1;
	track[2] = #590000 1'b0;
end 
// track[ 1 ]
initial
begin
	track[1] = 1'b0;
end 
// track[ 0 ]
initial
begin
	track[0] = 1'b0;
end 
endmodule


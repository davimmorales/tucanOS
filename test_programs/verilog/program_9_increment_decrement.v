	 	 instructionsRAM[5824] <= 32'b01101100000000000000000000000000;//Nop
	 	 instructionsRAM[5825] <= 32'b01010100000000000000000000000010;//Jump to #2
	 	 instructionsRAM[5826] <= 32'b01101000001000000100011010100000;//Loadi #18080 to r[1]
	 	 instructionsRAM[5827] <= 32'b00000100111000010000000000000000;//ADDi r[1], #0 to r[7]
	 	 instructionsRAM[5828] <= 32'b01100100111000000000000000000011;//Store r[7] in m[#3]
	 	 instructionsRAM[5829] <= 32'b01101000001000000000000000110010;//Loadi #50 to r[1]
	 	 instructionsRAM[5830] <= 32'b00000100111000010000000000000000;//ADDi r[1], #0 to r[7]
	 	 instructionsRAM[5831] <= 32'b01100100111000000000000000000010;//Store r[7] in m[#2]
	 	 instructionsRAM[5832] <= 32'b01101000001000000000000000000000;//Loadi #0 to r[1]
	 	 instructionsRAM[5833] <= 32'b00000100111000010000000000000000;//ADDi r[1], #0 to r[7]
	 	 instructionsRAM[5834] <= 32'b01100100111000000000000000000100;//Store r[7] in m[#4]
	 	 instructionsRAM[5835] <= 32'b01100000011000000000000000000100;//Load m[#4] to r[3]
	 	 instructionsRAM[5836] <= 32'b01100000100000000000000000000011;//Load m[#3] to r[4]
	 	 instructionsRAM[5837] <= 32'b01011100001000110010000000000000;//SLT if r[3] < r[4], r[1] = 1 else r[1] = 0
	 	 instructionsRAM[5838] <= 32'b00000100111000010000000000000000;//ADDi r[1], #0 to r[7]
	 	 instructionsRAM[5839] <= 32'b01111100000001110000000000000000;//Pre Branch r[7]
	 	 instructionsRAM[5840] <= 32'b01001100000000000000000000010101;//Branch on Zero #21
	 	 instructionsRAM[5841] <= 32'b01100000011000000000000000000011;//Load m[#3] to r[3]
	 	 instructionsRAM[5842] <= 32'b01101000100000000000000000000010;//Loadi #2 to r[4]
	 	 instructionsRAM[5843] <= 32'b00010100001000110010000000000000;//DIVIDE r[3],r[4] to r[1]
	 	 instructionsRAM[5844] <= 32'b00000100111000010000000000000000;//ADDi r[1], #0 to r[7]
	 	 instructionsRAM[5845] <= 32'b01100000011000000000000000000100;//Load m[#4] to r[3]
	 	 instructionsRAM[5846] <= 32'b00000100100001110000000000000000;//ADDi r[7], #0 to r[4]
	 	 instructionsRAM[5847] <= 32'b01011100001000110010000000000000;//SLT if r[3] < r[4], r[1] = 1 else r[1] = 0
	 	 instructionsRAM[5848] <= 32'b01011100011001000001100000000000;//SLT if r[4] < r[3], r[3] = 1 else r[3] = 0
	 	 instructionsRAM[5849] <= 32'b00100100001000010001100000000000;//OR r[1],r[3] to r[1]
	 	 instructionsRAM[5850] <= 32'b00110100001000010000000000000000;//NOT r[1] to r[1]
	 	 instructionsRAM[5851] <= 32'b00000100111000010000000000000000;//ADDi r[1], #0 to r[7]
	 	 instructionsRAM[5852] <= 32'b01111100000001110000000000000000;//Pre Branch r[7]
	 	 instructionsRAM[5853] <= 32'b01001100000000000000000000000011;//Branch on Zero #3
	 	 instructionsRAM[5854] <= 32'b01100000001000000000000000000100;//Load m[#4] to r[1]
	 	 instructionsRAM[5855] <= 32'b10000000001000000000000000000000;//Output r[1]
	 	 instructionsRAM[5856] <= 32'b10000000001000000000000000000000;//Output r[1]
	 	 instructionsRAM[5857] <= 32'b01100000011000000000000000000100;//Load m[#4] to r[3]
	 	 instructionsRAM[5858] <= 32'b00000100001000110000000000000001;//ADDi r[3], #1 to r[1]
	 	 instructionsRAM[5859] <= 32'b00000100111000010000000000000000;//ADDi r[1], #0 to r[7]
	 	 instructionsRAM[5860] <= 32'b01100100111000000000000000000100;//Store r[7] in m[#4]
	 	 instructionsRAM[5861] <= 32'b01010100000000000000000000001011;//Jump to #11
	 	 instructionsRAM[5862] <= 32'b01100000011000000000000000000010;//Load m[#2] to r[3]
	 	 instructionsRAM[5863] <= 32'b01100000100000000000000000000100;//Load m[#4] to r[4]
	 	 instructionsRAM[5864] <= 32'b01011100001000110010000000000000;//SLT if r[3] < r[4], r[1] = 1 else r[1] = 0
	 	 instructionsRAM[5865] <= 32'b00000100111000010000000000000000;//ADDi r[1], #0 to r[7]
	 	 instructionsRAM[5866] <= 32'b01111100000001110000000000000000;//Pre Branch r[7]
	 	 instructionsRAM[5867] <= 32'b01001100000000000000000000010101;//Branch on Zero #21
	 	 instructionsRAM[5868] <= 32'b01100000011000000000000000000010;//Load m[#2] to r[3]
	 	 instructionsRAM[5869] <= 32'b01101000100000000000000000000010;//Loadi #2 to r[4]
	 	 instructionsRAM[5870] <= 32'b00010000001000110010000000000000;//TIMES r[3],r[4] to r[1]
	 	 instructionsRAM[5871] <= 32'b00000100111000010000000000000000;//ADDi r[1], #0 to r[7]
	 	 instructionsRAM[5872] <= 32'b01100000011000000000000000000100;//Load m[#4] to r[3]
	 	 instructionsRAM[5873] <= 32'b00000100100001110000000000000000;//ADDi r[7], #0 to r[4]
	 	 instructionsRAM[5874] <= 32'b01011100001000110010000000000000;//SLT if r[3] < r[4], r[1] = 1 else r[1] = 0
	 	 instructionsRAM[5875] <= 32'b01011100011001000001100000000000;//SLT if r[4] < r[3], r[3] = 1 else r[3] = 0
	 	 instructionsRAM[5876] <= 32'b00100100001000010001100000000000;//OR r[1],r[3] to r[1]
	 	 instructionsRAM[5877] <= 32'b00110100001000010000000000000000;//NOT r[1] to r[1]
	 	 instructionsRAM[5878] <= 32'b00000100111000010000000000000000;//ADDi r[1], #0 to r[7]
	 	 instructionsRAM[5879] <= 32'b01111100000001110000000000000000;//Pre Branch r[7]
	 	 instructionsRAM[5880] <= 32'b01001100000000000000000000000011;//Branch on Zero #3
	 	 instructionsRAM[5881] <= 32'b01100000001000000000000000000100;//Load m[#4] to r[1]
	 	 instructionsRAM[5882] <= 32'b10000000001000000000000000000000;//Output r[1]
	 	 instructionsRAM[5883] <= 32'b10000000001000000000000000000000;//Output r[1]
	 	 instructionsRAM[5884] <= 32'b01100000011000000000000000000100;//Load m[#4] to r[3]
	 	 instructionsRAM[5885] <= 32'b00001100001000110000000000000001;//SUBi r[3], #1 to r[1]
	 	 instructionsRAM[5886] <= 32'b00000100111000010000000000000000;//ADDi r[1], #0 to r[7]
	 	 instructionsRAM[5887] <= 32'b01100100111000000000000000000100;//Store r[7] in m[#4]
	 	 instructionsRAM[5888] <= 32'b01010100000000000000000000100110;//Jump to #38
	 	 instructionsRAM[5889] <= 32'b01110000000000000000000000000000;//Hlt
